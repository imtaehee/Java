OOPreport

1. OOP(Object Oriented Programming)
프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 방법이다.
장점
코드 재사용 용이, 생산성 향상, 유지 보수 쉬움 , 대형 프로젝트에 적합
단점
처리속도 상대적으로 느림, 객체가 많으면 용량이 커질 수 있음, 설계 시 많은 시간과 노력 필요(=개발 속도가 느림), 코딩 난이도 상승(다중 상속이 지원되는 C++)

2. 객체
속성(필드)과 동작(메서드)으로 구성되어 있음
관련있는 것들을 하나로 묶는 개념적(추상적)인 주체가 클래스(class), 클래스로부터 실체화된 것이 객체(object)

3. Class
데이터를 가지고 작업할 때 관련있는 함수로 실행할 수 있게 만든 명령문 묶음

4. Abstraction 추상화
객체의 공통적인 속성과 기능을 추출하여 정의 = 공통 특성을 파악해 필요없는 특성을 제거하는 과정
속성 위주가 아닌 동작 위주로 정의하는 작업해야함
ex) 객체들은 실제 그 모습이지만 클래스는 객체들이 어떤 특징들이 있어야 한다고 정의하는 추상화된 개념

5. 상속(Inheritance)
기존 상위클래스에 기능을 가져와 재사용가능 + 동시에 새로운 하위클래스에 새로운 기능 추가가능
부모클래스, 자식클래스 -> 클래스 간의 관계가 계층형 구조(hierachical structure), 아래로 내려갈수록 구체화(specialize), 위로 갈수록 일반화(generalize)
(클래스가 구체화될 수록 고유의 특징들이 많이 생김(Specialization 구체화)
 클래스가 일반화될 수록 더 많은 객체에 영향을 줌(Generalization 일반화))
   - 코드의 중복 감소 
   - 프로그램의 생산성 증가
   - 유지보수 효율성 증가 : 공통적인 속성과 기능을 정의한 클래스를 생성하여 상속받아 사용하기 때문에

부모클래스 참조변수 = new 부모클래스();
부모클래스 참조변수 = new 자식클래스();
자식클래스 참조변수 = new 자식클래스();

6. Specialization 구체화
클래스가 구체화될 수록 고유의 특징들이 많이 생김
클래스 간의 관계가 계층형 구조(hierachical structure), 아래로 내려갈수록 구체화(specialize)

7. Realizaion (실체화관계, 구현)
인터페이스를 상속받아 자식클래스에서 재정의하여 사용
부모클래스의  은닉화 선언된 필드 또는 메소드는 상속되지만 접근은 불가능
부모 인스턴스 생성 후 자식 인스턴스 생성

8. Association (연관관계)
포함관계 (has a 관계)
클래스 안에 필드를 참조변수로 선언하여 사용, 인스턴스 정보저장 = 클래스 안에 멤버변수가 객체인 경우 다른클래스의 구성요소를 필드(멤버객체)로 사용

9. Dependency (의존관계)
메소드의 매개변수로 선언되어 사용되는 참조변수 = 클래스를 매개변수로 사용
클래스를 변경할 경우 의존관계의 클래스의 내용도 변경되어야 되는 관계
일시적으로 메소드에서 인스턴스를 사용할 경우

10. Polymorphism 다형성
상속과 연관있는 개념
한 객체가 상속을 통해 기능을 확장하거나 변경하여 다른 여러형태(객체)로 재구성 되는 것 = 한 부모의 밑에서 태어난 자식들이 조금씩 다름
=> 같은 이름의 속성을 유지함 -> 속성을 사용하기 위한 인터페이스를 유지, 메서드 이름 낭비하지 않음
ex) 오버라이딩 : 하위클래스가 상위클래스에서 만들어진 메서드를 재창조해서 사용
                    부모클래스의 메서드명, 매개변수의 개수나 데이터타입, 예외전달 반드시 동일
     오버로딩 : 하나의 클래스 안에서, 같은 이름의 메서드, 각 메서드마다 다른용도로 사용, 결과물도 다르게 구현
                 메서드명 같음, 매개변수의 개수나 데이터타입이 달라야함

11. Encapsulation 캡슐화
외부에서 접근이 필요한 부분 제외하고는 내부로 숨김(데이터의 구조, 역할, 기능을 하나의 캡슐형태로 만들어 데이터와 코드의 형태를 외부로부터 알 수 없게함)
변수를 private로 선언 -> 데이터 보호 (getter나 setter등의 메서드를 통해서만 간접적으로 접근허용)
정보은닉을 할 수 있음 그러나 정보은닉과 동일한 개념은 아님
정보은닉 : 외부로부터 세부적인 내용 숨기는 것 -> 클래스 내부구현의 응집도를 높이고, 외부 다른 클래스와의 결합도를 낮춤

==> OOP는 4가지 특성들을 통해서 어떤 대상을 추상화하여 공통점을 찾고, 그것을 캡슐화해 한군데에 모아 객체를 만들고, 새로운 객체가 상속받아 재사용이 가능하게 만들어 준다. 상속받은 객체는 다형성을 통해 기능을 수정 또는 추가하여 재사용할 수 있다.